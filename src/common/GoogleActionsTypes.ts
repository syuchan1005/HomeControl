/* generated by script:generateGoogleActionsTypes command */
export type DeviceType = {
  id: string;
  type: string;
  getTraits: () => Promise<Array<TraitType>>;
  name: {
    name: string;
    nicknames?: Array<string>;
    defaultNames?: Array<string>;
  },
  willReportState: boolean;
  roomHint?: string;
  deviceInfo?: {
    manufacturer: string;
    model: string;
    hwVersion: string;
    swVersion: string;
  };
  // QUERY or EXECUTE
  customData?: { [key: string]: string | boolean | number };
  otherDeviceIds?: Array<{
    deviceId: string;
    agentId?: string;
  }>;
};


type TraitType<A = any, S = any, C extends TraitCommandType<string, any> = any> = {
  type: string;

  // SYNC
  getAttributes: () => Promise<A>;

  getStates: () => Promise<S>;

  getCommands: () => Promise<C[]>;
};

type TraitCommandType<T extends string, P> = {
  type: T;
  parameters: P;
};

export const DeviceTypeInformation = {
  'action.devices.types.AC_UNIT': {
    name: 'Air conditioning unit',
    type: 'action.devices.types.AC_UNIT',
    description: 'Air conditioning units are similar to thermostats, but do not support heating and may not support setting temperature targets, but rather rely on modes, toggles, and fan speed settings (for example, high and low).',
    recommendedTrains: [
      'FanSpeed',
      'OnOff',
      'TemperatureSetting',
    ],
  },
  'action.devices.types.AIRCOOLER': {
    name: 'Air cooler',
    type: 'action.devices.types.AIRCOOLER',
    description: 'Air coolers are devices that allow temperature cooling and humidity control. These devices are typically more lightweight and portable than air conditioners, and have a water tank attached. Air coolers may not support heating or setting exact temperatures. Interactions with air coolers may include changing the fan speed and humidity setting.',
    recommendedTrains: [
      'FanSpeed',
      'HumiditySetting',
      'Modes',
      'OnOff',
      'TemperatureSetting',
      'Toggles',
    ],
  },
  'action.devices.types.AIRFRESHENER': {
    name: 'Air freshener',
    type: 'action.devices.types.AIRFRESHENER',
    description: 'Air fresheners can be turned on and off and adjust various modes and toggles.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'Toggles',
    ],
  },
  'action.devices.types.AIRPURIFIER': {
    name: 'Air purifier',
    type: 'action.devices.types.AIRPURIFIER',
    description: 'Air purifiers are devices that may be turned on and off, report air filter cleanliness and air filter lifetime, and be adjusted to various mode settings.',
    recommendedTrains: [
      'FanSpeed',
      'Modes',
      'OnOff',
      'SensorState',
      'Toggles',
    ],
  },
  'action.devices.types.AWNING': {
    name: 'Awning',
    type: 'action.devices.types.AWNING',
    description: 'Awnings are retractable and can opened and closed. They can be installed indoors or outdoors.',
    recommendedTrains: [
      'Modes',
      'OpenClose',
    ],
  },
  'action.devices.types.BATHTUB': {
    name: 'Bathtub',
    type: 'action.devices.types.BATHTUB',
    description: 'Bathtubs can be filled and drained, possibly to particular levels if the bathtub supports it.',
    recommendedTrains: [
      'Fill',
      'OnOff',
    ],
  },
  'action.devices.types.BED': {
    name: 'Bed',
    type: 'action.devices.types.BED',
    description: 'Interactions with beds may include adjusting various modes and setting scenes.',
    recommendedTrains: [
      'Modes',
      'Scene',
      'Toggles',
    ],
  },
  'action.devices.types.BLENDER': {
    name: 'Blender',
    type: 'action.devices.types.BLENDER',
    description: 'Interactions with blenders may include starting and stopping, setting a timer, setting cooking modes or food presets, or adjusting other various settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.BLINDS': {
    name: 'Blinds',
    type: 'action.devices.types.BLINDS',
    description: 'Blinds can be opened and closed, and various types of blinds are supported such as venetian (opens in one direction), panel or vertical (may open either left or right), and top-down bottom-up (may open either up or down).',
    recommendedTrains: [
      'Modes',
      'OpenClose',
      'Rotation',
    ],
  },
  'action.devices.types.BOILER': {
    name: 'Boiler',
    type: 'action.devices.types.BOILER',
    description: 'Boilers can be turned on and off, may support adjusting temperature or various modes.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'Toggles',
      'TemperatureControl',
    ],
  },
  'action.devices.types.CAMERA': {
    name: 'Camera',
    type: 'action.devices.types.CAMERA',
    description: 'Cameras are complex and features will vary significantly between vendors. Over time, cameras will acquire many traits and attributes describing specific capabilities, many of which may interact with the video/audio stream in special ways, such as sending a stream to another device, identifying what\'s in the stream, replaying feeds, etc. As such, cameras also interact with other devices - especially screens and other media targets.',
    recommendedTrains: [
      'CameraStream',
    ],
  },
  'action.devices.types.CARBON_MONOXIDE_DETECTOR': {
    name: 'Carbon monoxide detector',
    type: 'action.devices.types.CARBON_MONOXIDE_DETECTOR',
    description: 'Carbon monoxide detectors may report whether carbon monoxide is currently detected, whether the carbon monoxide level is high, and the current carbon monoxide level in parts per million.',
    recommendedTrains: [
      'SensorState',
    ],
  },
  'action.devices.types.CHARGER': {
    name: 'Charger',
    type: 'action.devices.types.CHARGER',
    description: 'Interactions with chargers may include starting and stopping charging, and checking the current charge level, capacity remaining, and capacity until full values.',
    recommendedTrains: [
      'EnergyStorage',
    ],
  },
  'action.devices.types.CLOSET': {
    name: 'Closet',
    type: 'action.devices.types.CLOSET',
    description: 'Closets can be opened and closed, potentially in more than one direction.',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.COFFEE_MAKER': {
    name: 'Coffee maker',
    type: 'action.devices.types.COFFEE_MAKER',
    description: 'Interactions with coffee makers may include turning them on and off, adjusting cooking modes and food presets, adjusting the target temperature, and adjusting various non-cooking mode settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'TemperatureControl',
      'Toggles',
    ],
  },
  'action.devices.types.COOKTOP': {
    name: 'Cooktop',
    type: 'action.devices.types.COOKTOP',
    description: 'Interactions with cooktops may include turning them on and off, starting and stopping, setting a timer, adjusting cooking modes and food presets, and adjusting various non-cooking mode settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.CURTAIN': {
    name: 'Curtain',
    type: 'action.devices.types.CURTAIN',
    description: 'Curtains can be opened and closed, potentially in more than one direction. For example, curtains with two sections may open either to the left or to the right.',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.DEHUMIDIFIER': {
    name: 'Dehumidifier',
    type: 'action.devices.types.DEHUMIDIFIER',
    description: 'Dehumidifiers are devices that remove moisture from the air. They can be turned on and off, report and adjust target humidity, and may have various adjustables modes, toggles, or fan speed settings.',
    recommendedTrains: [
      'FanSpeed',
      'HumiditySetting',
      'Modes',
      'OnOff',
      'RunCycle',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.DEHYDRATOR': {
    name: 'Dehydrator',
    type: 'action.devices.types.DEHYDRATOR',
    description: 'Interactions with dehydrators may include starting and stopping, setting a timer, adjusting cooking modes or food presets, or adjusting other various settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.DISHWASHER': {
    name: 'Dishwasher',
    type: 'action.devices.types.DISHWASHER',
    description: 'Dishwashers can have start and stop functionality independent from being on or off (some washers have separate power buttons, and some do not). Some can be paused and resumed while washing.Dishwashers also have various modes and each mode has its own related settings. These are specific to the dishwasher and are interpreted in a generalized form.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'RunCycle',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.DOOR': {
    name: 'Door',
    type: 'action.devices.types.DOOR',
    description: 'Door can be opened and closed, potentially in more than one direction .',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.DRAWER': {
    name: 'Drawer',
    type: 'action.devices.types.DRAWER',
    description: 'Drawers can be opened and closed, potentially in more than one direction.',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.DRYER': {
    name: 'Dryer',
    type: 'action.devices.types.DRYER',
    description: 'Dryers have start and stop functionality independent from being on or off. Some can be paused and resumed while drying. Dryers also have various modes and each mode has its own related settings. These are specific to the dryer and are interpreted in a generalized form.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'RunCycle',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.FAN': {
    name: 'Fan',
    type: 'action.devices.types.FAN',
    description: 'Fans can typically be turned on and off and have speed settings. Some fans may also have additional supported modes, such as fan direction/orientation (for example, a wall unit may have settings to adjust whether it blows up or down).',
    recommendedTrains: [
      'FanSpeed',
      'Modes',
      'OnOff',
      'Toggles',
    ],
  },
  'action.devices.types.FAUCET': {
    name: 'Faucet',
    type: 'action.devices.types.FAUCET',
    description: 'Faucets can dispense liquids in various quantities and presets.',
    recommendedTrains: [
      'Dispense',
      'Modes',
      'OnOff',
      'StartStop',
    ],
  },
  'action.devices.types.FIREPLACE': {
    name: 'Fireplace',
    type: 'action.devices.types.FIREPLACE',
    description: 'Fireplaces can be turned on and off, and may have adjustable modes and toggles.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'Toggles',
    ],
  },
  'action.devices.types.FREEZER': {
    name: 'Freezer',
    type: 'action.devices.types.FREEZER',
    description: 'Freezers are temperature-managing devices which may be adjusted to various mode settings, and may allow temperature monitoring.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'TemperatureControl',
      'Toggles',
    ],
  },
  'action.devices.types.FRYER': {
    name: 'Fryer',
    type: 'action.devices.types.FRYER',
    description: 'Interactions with fryers may include starting and stopping, setting a timer, adjusting cooking modes or food presets, or adjusting other various settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.GARAGE': {
    name: 'Garage Door',
    type: 'action.devices.types.GARAGE',
    description: 'Garage doors can open, close, and detect an open state. They can also indicate if an object has obstructed the path of the door while closing or if the door is locked and therefore cannot be controlled.',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.GATE': {
    name: 'Gate',
    type: 'action.devices.types.GATE',
    description: 'Gates can be opened and closed, potentially in more than on direction .',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.GRILL': {
    name: 'Grill',
    type: 'action.devices.types.GRILL',
    description: 'Interactions with grills may include turning them on and off, starting and stopping, setting a timer, adjusting cooking modes and food presets, and adjusting various non-cooking mode settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.HEATER': {
    name: 'Heater',
    type: 'action.devices.types.HEATER',
    description: 'Heaters are similar to thermostats but do not support cooling and may not support setting temperature targets. Heaters may rely on modes, toggles, and fan speed settings.',
    recommendedTrains: [
      'FanSpeed',
      'OnOff',
      'TemperatureSetting',
    ],
  },
  'action.devices.types.HOOD': {
    name: 'Hood',
    type: 'action.devices.types.HOOD',
    description: 'Oven and range hoods can be turned on and off, may have adjustable modes, and may have adjustable fan speeds.',
    recommendedTrains: [
      'FanSpeed',
      'Modes',
      'OnOff',
      'Toggles',
    ],
  },
  'action.devices.types.HUMIDIFIER': {
    name: 'Humidifier',
    type: 'action.devices.types.HUMIDIFIER',
    description: 'Humidifiers are devices that add moisture to the air. They can be turned on and off, report and adjust target humidity, and may have various adjustable modes, toggles, or fan speed settings.',
    recommendedTrains: [
      'FanSpeed',
      'HumiditySetting',
      'Modes',
      'OnOff',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.KETTLE': {
    name: 'Kettle',
    type: 'action.devices.types.KETTLE',
    description: 'Kettles are devices that boil water. Interactions with kettles may include turning them on and off, adjusting the target temperature, and perhaps adjusting various mode settings.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'TemperatureControl',
      'Toggles',
    ],
  },
  'action.devices.types.LIGHT': {
    name: 'Light',
    type: 'action.devices.types.LIGHT',
    description: 'This type indicates that the device gets the light bulb icon and some light synonyms/aliases.',
    recommendedTrains: [
      'Brightness',
      'ColorSetting',
      'OnOff',
    ],
  },
  'action.devices.types.LOCK': {
    name: 'Lock',
    type: 'action.devices.types.LOCK',
    description: 'Locks can lock, unlock, and report a locked state. Unlocking is a security sensitive action which can require two-factor authentication.',
    recommendedTrains: [
      'LockUnlock',
    ],
  },
  'action.devices.types.REMOTECONTROL': {
    name: 'Media remote',
    type: 'action.devices.types.REMOTECONTROL',
    description: 'Media remotes are used to control media devices. Examples of this device type include hubs, universal remotes, and media controllers.',
    recommendedTrains: [
      'AppSelector',
      'InputSelector',
      'MediaState',
      'OnOff',
      'Toggles',
      'TransportControl',
      'Volume',
    ],
  },
  'action.devices.types.MOP': {
    name: 'Mop',
    type: 'action.devices.types.MOP',
    description: 'Interactions with mops may include starting, stopping, pausing cleaning, docking, checking the current cleaning cycle, locating the mop, or adjusting various modes and toggles. Some mops may support cleaning specific zones in the home.',
    recommendedTrains: [
      'Dock',
      'Locator',
      'Modes',
      'OnOff',
      'RunCycle',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.MOWER': {
    name: 'Mower',
    type: 'action.devices.types.MOWER',
    description: 'Interactions with mowers may include starting, stopping and pausing mowing, docking, checking the current cycle, locating the mower, and adjusting various modes and toggles.',
    recommendedTrains: [
      'Dock',
      'Locator',
      'Modes',
      'OnOff',
      'RunCycle',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.MICROWAVE': {
    name: 'Microwave',
    type: 'action.devices.types.MICROWAVE',
    description: 'Interactions with microwaves may include starting and stopping, setting a timer, adjusting cooking modes and food presets, and adjusting non-cooking modes (such as the power level) and toggles (such as a light).',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.MULTICOOKER': {
    name: 'Multicooker',
    type: 'action.devices.types.MULTICOOKER',
    description: 'Interactions with multicookers may include starting and stopping, setting a timer, or adjusting various modes and toggles.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.NETWORK': {
    name: 'Network',
    type: 'action.devices.types.NETWORK',
    description: 'Represents a group of router nodes or a mesh network controlled as one entity rather than as individual devices. The network device may reboot, update its software, and have modes to handle Quality of service (QoS) controls and parental restrictions. The device can perform operations such as enabling the guest network, and reporting network-specific information such as the current internet throughput rates.',
    recommendedTrains: [
      'Modes',
      'Toggles',
      'Reboot',
      'SoftwareUpdate',
      'NetworkControl',
    ],
  },
  'action.devices.types.OUTLET': {
    name: 'Outlet',
    type: 'action.devices.types.OUTLET',
    description: 'This type indicates that the device gets the plug icon and some outlet synonyms/aliases.',
    recommendedTrains: [
      'OnOff',
    ],
  },
  'action.devices.types.OVEN': {
    name: 'Oven',
    type: 'action.devices.types.OVEN',
    description: 'Interaction with ovens involves the ability to bake or broil at certain temperatures. The physical temperature inside the oven differs as the oven is heating, so this may also be monitored. The oven has a cook time that limits the duration of baking.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'TemperatureControl',
      'Toggles',
    ],
  },
  'action.devices.types.PERGOLA': {
    name: 'Pergola',
    type: 'action.devices.types.PERGOLA',
    description: 'Pergolas (an outdoor garden structure) can be opened and closed, potentially in more than one direction. For example, some pergolas with a canvas may open either to the LEFT or RIGHT.',
    recommendedTrains: [
      'OpenClose',
      'Rotation',
    ],
  },
  'action.devices.types.PETFEEDER': {
    name: 'Pet feeder',
    type: 'action.devices.types.PETFEEDER',
    description: 'Interactions with pet feeders may include dispensing pet food or water in various quantities and presets, and adjusting various modes and toggles.',
    recommendedTrains: [
      'Dispense',
      'Modes',
      'OnOff',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.PRESSURECOOKER': {
    name: 'Pressure cooker',
    type: 'action.devices.types.PRESSURECOOKER',
    description: 'Interactions with pressure cookers may include starting and stopping, setting a timer, adjusting cooking modes or food presets, or adjusting other various settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.RADIATOR': {
    name: 'Radiator',
    type: 'action.devices.types.RADIATOR',
    description: 'Interactions with radiators may include turning them on and off, and adjusting various modes and toggles.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'Toggles',
    ],
  },
  'action.devices.types.REFRIGERATOR': {
    name: 'Refrigerator',
    type: 'action.devices.types.REFRIGERATOR',
    description: 'This type indicates that the device gets the appropriate icon and some refrigerator synonyms/aliases. Refrigerators are temperature-managing devices which may have various modes/settings.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'TemperatureControl',
      'Toggles',
    ],
  },
  'action.devices.types.ROUTER': {
    name: 'Router',
    type: 'action.devices.types.ROUTER',
    description: 'Routers can reboot, update their software, have modes to handle Quality of service (QoS) controls and parental restrictions, and perform network specific operations (such as enabling the guest network and reporting network specific information such as the current internet throughput rates).',
    recommendedTrains: [
      'Modes',
      'Toggles',
      'Reboot',
      'SoftwareUpdate',
      'NetworkControl',
    ],
  },
  'action.devices.types.SCENE': {
    name: 'Scene',
    type: 'action.devices.types.SCENE',
    description: 'Scenes defined here are partner scenes, implemented as virtual devices and activated by name.',
    recommendedTrains: [
      'Scene',
    ],
  },
  'action.devices.types.SENSOR': {
    name: 'Sensor',
    type: 'action.devices.types.SENSOR',
    description: 'A single sensor can serve multiple functions, such as monitoring both temperature and humidity. Sensors may report either or both quantitative—for example, carbon monoxide and smoke level measured at parts per million—and qualitative measurements (such as whether air quality is healthy or unhealthy).',
    recommendedTrains: [
      'HumiditySetting',
      'Modes',
      'OnOff',
      'SensorState',
    ],
  },
  'action.devices.types.SECURITYSYSTEM': {
    name: 'Security system',
    type: 'action.devices.types.SECURITYSYSTEM',
    description: 'Security systems can be armed and disarmed. They can be armed at multiple security levels (for example, home and away) and they can report information about certain sensors, such as a sensor that detects motion or an open window. Disarming a security system is a sensitive action which may require two-factor authentication.',
    recommendedTrains: [
      'ArmDisarm',
      'SensorState',
      'StatusReport',
    ],
  },
  'action.devices.types.SETTOP': {
    name: 'Set-top box',
    type: 'action.devices.types.SETTOP',
    description: 'Interactions with Multichannel Video Programming Distributor (MVPD) and set-top-box devices may include controlling media playback.',
    recommendedTrains: [
      'AppSelector',
      'InputSelector',
      'MediaState',
      'OnOff',
      'TransportControl',
      'Volume',
    ],
  },
  'action.devices.types.SHUTTER': {
    name: 'Shutter',
    type: 'action.devices.types.SHUTTER',
    description: 'Shutters can be opened and closed, potentially in more than one direction.',
    recommendedTrains: [
      'Modes',
      'OpenClose',
      'Rotation',
    ],
  },
  'action.devices.types.SHOWER': {
    name: 'Shower',
    type: 'action.devices.types.SHOWER',
    description: 'Showers can be turned on and off, start and stop, and may support adjusting temperature or various modes.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'StartStop',
      'TemperatureControl',
    ],
  },
  'action.devices.types.SMOKE_DETECTOR': {
    name: 'Smoke detector',
    type: 'action.devices.types.SMOKE_DETECTOR',
    description: 'Smoke detectors can report whether smoke is currently detected, whether the smoke level is high, and the current smoke level in parts per million.',
    recommendedTrains: [
      'SensorState',
    ],
  },
  'action.devices.types.SOUSVIDE': {
    name: 'Sous vide',
    type: 'action.devices.types.SOUSVIDE',
    description: 'Interactions with sous vides may include starting and stopping, setting a timer, adjusting cooking modes or food presets, or adjusting other various settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
  'action.devices.types.SPRINKLER': {
    name: 'Sprinkler',
    type: 'action.devices.types.SPRINKLER',
    description: 'Sprinklers can start and stop (or turn on and off). In the future, they may support timers and/or schedules.',
    recommendedTrains: [
      'StartStop',
    ],
  },
  'action.devices.types.STANDMIXER': {
    name: 'Stand mixer',
    type: 'action.devices.types.STANDMIXER',
    description: 'Interactions with stand mixers may include turning mixers on and off, starting and stopping the mixer, adjusting cooking modes or food presets, or adjusting various non-cooking mode settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.SWITCH': {
    name: 'Switch',
    type: 'action.devices.types.SWITCH',
    description: 'This type indicates that the device gets the switch icon and some switch synonyms/aliases.',
    recommendedTrains: [
      'OnOff',
    ],
  },
  'action.devices.types.TV': {
    name: 'Television',
    type: 'action.devices.types.TV',
    description: 'Television devices include smart TV devices, over-the-top (OTT) streaming boxes, and OTT streaming sticks.',
    recommendedTrains: [
      'AppSelector',
      'InputSelector',
      'MediaState',
      'Modes',
      'OnOff',
      'Toggles',
      'TransportControl',
      'Volume',
    ],
  },
  'action.devices.types.THERMOSTAT': {
    name: 'Thermostat',
    type: 'action.devices.types.THERMOSTAT',
    description: 'Thermostats are temperature-managing devices, with set points and modes. This separates them from heaters and AC units which may only have modes and settings (for example, high/low) vs a temperature target.',
    recommendedTrains: [
      'TemperatureSetting',
    ],
  },
  'action.devices.types.VACUUM': {
    name: 'Vacuum',
    type: 'action.devices.types.VACUUM',
    description: 'Vacuums may have functions such as starting, stopping, and pausing cleaning, docking, checking the current cleaning cycle, locating the vacuum, or adjusting various modes such as turbo mode, and toggles such as quiet. Some vacuums may support cleaning specific zones in the home.',
    recommendedTrains: [
      'Dock',
      'Modes',
      'OnOff',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.VALVE': {
    name: 'Valve',
    type: 'action.devices.types.VALVE',
    description: 'Valves can be opened and closed.',
    recommendedTrains: [
      'OpenClose',
    ],
  },
  'action.devices.types.WASHER': {
    name: 'Washer',
    type: 'action.devices.types.WASHER',
    description: 'Washers can have start and stop functionality independent from being on or off (some washers have separate power buttons, and some do not). Some can be paused and resumed while washing. Washers also have various modes and each mode has its own related settings. These are specific to the washer and are interpreted in a generalized form.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'RunCycle',
      'StartStop',
      'Toggles',
    ],
  },
  'action.devices.types.WATERHEATER': {
    name: 'Water heater',
    type: 'action.devices.types.WATERHEATER',
    description: 'Water heaters are devices used to heat water. They may turn on and off, adjust water temperature, or adjust various modes/toggles.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'TemperatureControl',
      'Toggles',
    ],
  },
  'action.devices.types.WATERPURIFIER': {
    name: 'Water purifier',
    type: 'action.devices.types.WATERPURIFIER',
    description: 'Water purifiers are devices that may be turned on and off, report water filter cleanliness and filter lifetime, and be adjusted to various mode settings.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'SensorState',
      'Toggles',
    ],
  },
  'action.devices.types.WATERSOFTENER': {
    name: 'Water softener',
    type: 'action.devices.types.WATERSOFTENER',
    description: 'Water softeners are devices that may be turned on and off, report water filter cleanliness and filter lifetime, and be adjusted to various mode settings.',
    recommendedTrains: [
      'Modes',
      'OnOff',
      'SensorState',
      'Toggles',
    ],
  },
  'action.devices.types.WINDOW': {
    name: 'Window',
    type: 'action.devices.types.WINDOW',
    description: 'Windows can be opened and closed, optionally with sections that open in different directions, and may also be locked and unlocked.',
    recommendedTrains: [
      'LockUnlock',
      'OpenClose',
    ],
  },
  'action.devices.types.YOGURTMAKER': {
    name: 'Yogurt maker',
    type: 'action.devices.types.YOGURTMAKER',
    description: 'Interactions with yogurt makers may include starting and stopping, setting a timer, adjusting cooking modes or food presets, or adjusting other various settings.',
    recommendedTrains: [
      'Cook',
      'Modes',
      'OnOff',
      'StartStop',
      'Timer',
      'Toggles',
    ],
  },
};

export const TraitTypeInformation = {
  'action.devices.traits.AppSelector': {
    name: 'AppSelector',
    type: 'action.devices.traits.AppSelector',
    description: 'This trait belongs to devices that support media applications, typically from third parties.',
    commands: [
      'newApplication',
      'newApplicationName',
    ],
  },
  'action.devices.traits.ArmDisarm': {
    name: 'ArmDisarm',
    type: 'action.devices.traits.ArmDisarm',
    description: 'This trait supports arming and disarming as used in, for example, security systems.',
    commands: [
      'action.devices.commands.ArmDisarm',
    ],
  },
  'action.devices.traits.Brightness': {
    name: 'Brightness',
    type: 'action.devices.traits.Brightness',
    description: 'Absolute brightness setting is in a normalized range from 0 to 100 (individual lights may not support every point in the range based on their LED configuration).',
    commands: [
      'action.devices.commands.BrightnessAbsolute',
    ],
  },
  'action.devices.traits.CameraStream': {
    name: 'CameraStream',
    type: 'action.devices.traits.CameraStream',
    description: 'This trait belongs to devices which have the capability to stream video feeds to third party screens, Chromecast-connected screens, or smartphones. By and large, these are security cameras or baby cameras. But this trait also applies to more complex devices which have a camera on them (for example, video-conferencing devices or a vacuum robot with a camera on it).',
    commands: [
      'action.devices.commands.GetCameraStream',
    ],
  },
  'action.devices.traits.ColorSetting': {
    name: 'ColorSetting',
    type: 'action.devices.traits.ColorSetting',
    description: 'This trait applies to devices, such as smart lights, that can change color or color temperature.',
    commands: [
      'action.devices.commands.ColorAbsolute',
    ],
  },
  'action.devices.traits.ColorSpectrum': {
    name: 'ColorSpectrum',
    type: 'action.devices.traits.ColorSpectrum',
    description: 'This trait has been deprecated. Use ColorSetting   instead.This applies to "full" color bulbs that take RGB color ranges. Lights may have any combination of ColorSpectrum and ColorTemperature; accent lights and LED strips may just have Spectrum, whereas some reading bulbs just have Temperature. Basic bulbs, or dumb lights on smart plugs, have neither.',
    commands: [
      'action.devices.commands.ColorAbsolute',
    ],
  },
  'action.devices.traits.ColorTemperature': {
    name: 'ColorTemperature',
    type: 'action.devices.traits.ColorTemperature',
    description: 'This trait has been deprecated. Use ColorSetting   instead.This applies to "warmth" bulbs that take a color point in Kelvin. This is generally a separate modality from ColorSpectrum, and there may be white points available via Temperature that cannot be reached by Spectrum. Based on available traits, Google may pick the appropriate mode to use based on request and light type (for example, Make the living room lights white might send Temperature commands to some bulbs and Spectrum commands to LED strips).',
    commands: [
      'action.devices.commands.ColorAbsolute',
    ],
  },
  'action.devices.traits.Cook': {
    name: 'Cook',
    type: 'action.devices.traits.Cook',
    description: 'This trait belongs to devices that can cook food according to various food presets and supported cooking modes.',
    commands: [
      'action.devices.commands.Cook',
    ],
  },
  'action.devices.traits.Dispense': {
    name: 'Dispense',
    type: 'action.devices.traits.Dispense',
    description: 'This trait belongs to devices that support dispensing a specified amount of one or more physical items. For example, a dog treat dispenser may dispense a number of treats, a faucet may dispense cups of water, and a pet feeder may dispense both water and pet food.',
    commands: [
      'action.devices.commands.Dispense',
    ],
  },
  'action.devices.traits.Dock': {
    name: 'Dock',
    type: 'action.devices.traits.Dock',
    description: 'This trait is designed for self-mobile devices that can be commanded to return for charging.',
    commands: [
      'action.devices.commands.Dock',
    ],
  },
  'action.devices.traits.EnergyStorage': {
    name: 'EnergyStorage',
    type: 'action.devices.traits.EnergyStorage',
    description: 'This trait belongs to devices that can store energy in a battery and potentially recharge, or devices that can charge another device. The trait supports starting and stopping charging, and checking the current charge level, capacity remaining, and capacity until full values.',
    commands: [
      'action.devices.commands.Charge',
    ],
  },
  'action.devices.traits.FanSpeed': {
    name: 'FanSpeed',
    type: 'action.devices.traits.FanSpeed',
    description: 'This trait belongs to devices that support setting the speed of a fan (that is, blowing air from the device at various levels, which may be part of an air conditioning or heating unit, or in a car), with settings such as low, medium, and high.',
    commands: [
      'action.devices.commands.SetFanSpeed',
      'action.devices.commands.SetFanSpeedRelativeSpeed',
      'action.devices.commands.Reverse',
    ],
  },
  'action.devices.traits.Fill': {
    name: 'Fill',
    type: 'action.devices.traits.Fill',
    description: 'This trait applies to devices that support being filled, such as a bathtub.',
    commands: [
      'action.devices.commands.Fill',
    ],
  },
  'action.devices.traits.HumiditySetting': {
    name: 'HumiditySetting',
    type: 'action.devices.traits.HumiditySetting',
    description: 'This trait belongs to devices that support humidity settings such as humidifiers and dehumidifiers.',
    commands: [
      'action.devices.commands.SetHumidity',
      'action.devices.commands.HumidityRelative',
    ],
  },
  'action.devices.traits.InputSelector': {
    name: 'InputSelector',
    type: 'action.devices.traits.InputSelector',
    description: 'Trait for devices that can change media inputs. These inputs can have dynamic names per device, and may represent audio or video feeds, hardwired or networked.',
    commands: [
      'newInput',
    ],
  },
  'action.devices.traits.LightEffects': {
    name: 'LightEffects',
    type: 'action.devices.traits.LightEffects',
    description: 'This trait belongs to devices that can support complex lighting commands to change state, such as looping through various colors.',
    commands: [
      'action.devices.commands.ColorLoop',
      'action.devices.commands.Sleep',
      'action.devices.commands.StopEffect',
      'action.devices.commands.Wake',
    ],
  },
  'action.devices.traits.Locator': {
    name: 'Locator',
    type: 'action.devices.traits.Locator',
    description: 'This trait is used for devices that can be "found". This includes phones, robots (including vacuums and mowers), drones, and tag-specific products that attach to other devices.',
    commands: [
      'action.devices.commands.Locate',
    ],
  },
  'action.devices.traits.LockUnlock': {
    name: 'LockUnlock',
    type: 'action.devices.traits.LockUnlock',
    description: 'This trait belongs to any devices that support locking and unlocking, and/or reporting a locked state.',
    commands: [
      'action.devices.commands.LockUnlock',
    ],
  },
  'action.devices.traits.MediaState': {
    name: 'MediaState',
    type: 'action.devices.traits.MediaState',
    description: 'This trait is used for devices which are able to report media states.',
    commands: [

    ],
  },
  'action.devices.traits.Modes': {
    name: 'Modes',
    type: 'action.devices.traits.Modes',
    description: 'This trait belongs to any devices with an arbitrary number of "n-way" modes in which the modes and settings for each mode are arbitrary and unique to each device or device type. Each mode has multiple possible settings, but only one can be selected at a time; a dryer cannot be in "delicate," "normal," and "heavy duty" mode simultaneously. A setting that simply can be turned on or off belongs in the Toggles trait.',
    commands: [
      'action.devices.commands.SetModes',
    ],
  },
  'action.devices.traits.NetworkControl': {
    name: 'NetworkControl',
    type: 'action.devices.traits.NetworkControl',
    description: 'This trait belongs to devices that support reporting network data and performing network specific operations.',
    commands: [
      'enable',
    ],
  },
  'action.devices.traits.OnOff': {
    name: 'OnOff',
    type: 'action.devices.traits.OnOff',
    description: 'The basic on and off functionality for any device that has binary on and off, including plugs and switches as well as many future devices.',
    commands: [
      'action.devices.commands.OnOff',
    ],
  },
  'action.devices.traits.OpenClose': {
    name: 'OpenClose',
    type: 'action.devices.traits.OpenClose',
    description: 'This trait belongs to devices that support opening and closing, and in some cases opening and closing partially or potentially in more than one direction. For example, some blinds may open either to the left or to the right. In some cases, opening certain devices may be a security sensitive action which can require two-factor authentication authentication. See Two-factor authentication.',
    commands: [
      'action.devices.commands.OpenClose',
    ],
  },
  'action.devices.traits.Reboot': {
    name: 'Reboot',
    type: 'action.devices.traits.Reboot',
    description: 'This trait belongs to devices that support rebooting, such as routers. The device needs to support rebooting as a single action.',
    commands: [
      'action.devices.commands.Reboot',
    ],
  },
  'action.devices.traits.Rotation': {
    name: 'Rotation',
    type: 'action.devices.traits.Rotation',
    description: 'This trait belongs to devices that support rotation, such as blinds with rotatable slats.',
    commands: [
      'action.devices.commands.RotateAbsolute',
    ],
  },
  'action.devices.traits.RunCycle': {
    name: 'RunCycle',
    type: 'action.devices.traits.RunCycle',
    description: 'This trait represents any device that has an ongoing duration for its operation which can be queried. This includes, but is not limited to, devices that operate cyclically, such as washing machines, dryers, and dishwashers.',
    commands: [

    ],
  },
  'action.devices.traits.SensorState': {
    name: 'SensorState',
    type: 'action.devices.traits.SensorState',
    description: 'This trait covers both quantitative measurement (for example, air quality index or smoke level) and qualitative state (for example, whether the air quality is healthy or whether the smoke level is low or high).',
    commands: [

    ],
  },
  'action.devices.traits.Scene': {
    name: 'Scene',
    type: 'action.devices.traits.Scene',
    description: 'In the case of scenes, the type maps 1:1 to the trait, as scenes don\'t combine with other traits to form composite devices.',
    commands: [
      'action.devices.commands.ActivateScene',
    ],
  },
  'action.devices.traits.SoftwareUpdate': {
    name: 'SoftwareUpdate',
    type: 'action.devices.traits.SoftwareUpdate',
    description: 'This trait belongs to devices that support software updates such as a router. Optionally, these devices may report the time of the last successful update.',
    commands: [
      'action.devices.commands.SoftwareUpdate',
    ],
  },
  'action.devices.traits.StartStop': {
    name: 'StartStop',
    type: 'action.devices.traits.StartStop',
    description: 'Starting and stopping a device serves a similar function to turning it on and off. Devices that inherit this trait function differently when turned on and when started. Unlike devices that simply have an on and off state, some devices that can start and stop are also able to pause while performing operation.',
    commands: [
      'action.devices.commands.StartStop',
      'action.devices.commands.PauseUnpause',
    ],
  },
  'action.devices.traits.StatusReport': {
    name: 'StatusReport',
    type: 'action.devices.traits.StatusReport',
    description: 'This trait reports the current status or state of a specific device or a connected group of devices.',
    commands: [

    ],
  },
  'action.devices.traits.TemperatureControl': {
    name: 'TemperatureControl',
    type: 'action.devices.traits.TemperatureControl',
    description: 'Trait for devices (other than thermostats) that support controlling temperature, either within or around the device. This includes devices such as ovens and refrigerators.',
    commands: [
      'action.devices.commands.SetTemperature',
    ],
  },
  'action.devices.traits.TemperatureSetting': {
    name: 'TemperatureSetting',
    type: 'action.devices.traits.TemperatureSetting',
    description: 'This trait covers handling both temperature point and modes.',
    commands: [
      'action.devices.commands.ThermostatTemperatureSetpoint',
      'action.devices.commands.ThermostatTemperatureSetRange',
      'action.devices.commands.ThermostatSetMode',
      'action.devices.commands.TemperatureRelative',
    ],
  },
  'action.devices.traits.Timer': {
    name: 'Timer',
    type: 'action.devices.traits.Timer',
    description: 'The Timer trait represents a timer on a device, primarily kitchen appliances such as ovens and microwaves, but not limited to them.',
    commands: [
      'action.devices.commands.TimerStart',
      'action.devices.commands.TimerAdjust',
      'action.devices.commands.TimerPause',
      'action.devices.commands.TimerResume',
      'action.devices.commands.TimerCancel',
    ],
  },
  'action.devices.traits.Toggles': {
    name: 'Toggles',
    type: 'action.devices.traits.Toggles',
    description: 'This trait belongs to any devices with settings that can only exist in one of two states. These settings can represent a physical button with an on/off or active/inactive state, a checkbox in HTML, or any other sort of specifically enabled/disabled element.',
    commands: [
      'action.devices.commands.SetToggles',
    ],
  },
  'action.devices.traits.TransportControl': {
    name: 'TransportControl',
    type: 'action.devices.traits.TransportControl',
    description: 'This trait supports media devices which are able to control media playback (for example, resuming music that\'s paused).',
    commands: [
      'closedCaptioningLanguage',
      'userQueryLanguage',
    ],
  },
  'action.devices.traits.Volume': {
    name: 'Volume',
    type: 'action.devices.traits.Volume',
    description: 'This trait belongs to devices which are able to change volume (for example, setting the volume to a certain level, mute, or unmute).',
    commands: [
      'mute',
    ],
  },
};

export const CommandTypeInformation = {
  newApplication: {
    type: 'newApplication',
  },
  newApplicationName: {
    type: 'newApplicationName',
  },
  'action.devices.commands.ArmDisarm': {
    type: 'action.devices.commands.ArmDisarm',
  },
  'action.devices.commands.BrightnessAbsolute': {
    type: 'action.devices.commands.BrightnessAbsolute',
  },
  'action.devices.commands.GetCameraStream': {
    type: 'action.devices.commands.GetCameraStream',
  },
  'action.devices.commands.ColorAbsolute': {
    type: 'action.devices.commands.ColorAbsolute',
  },
  'action.devices.commands.Cook': {
    type: 'action.devices.commands.Cook',
  },
  'action.devices.commands.Dispense': {
    type: 'action.devices.commands.Dispense',
  },
  'action.devices.commands.Dock': {
    type: 'action.devices.commands.Dock',
  },
  'action.devices.commands.Charge': {
    type: 'action.devices.commands.Charge',
  },
  'action.devices.commands.SetFanSpeed': {
    type: 'action.devices.commands.SetFanSpeed',
  },
  'action.devices.commands.SetFanSpeedRelativeSpeed': {
    type: 'action.devices.commands.SetFanSpeedRelativeSpeed',
  },
  'action.devices.commands.Reverse': {
    type: 'action.devices.commands.Reverse',
  },
  'action.devices.commands.Fill': {
    type: 'action.devices.commands.Fill',
  },
  'action.devices.commands.SetHumidity': {
    type: 'action.devices.commands.SetHumidity',
  },
  'action.devices.commands.HumidityRelative': {
    type: 'action.devices.commands.HumidityRelative',
  },
  newInput: {
    type: 'newInput',
  },
  'action.devices.commands.ColorLoop': {
    type: 'action.devices.commands.ColorLoop',
  },
  'action.devices.commands.Sleep': {
    type: 'action.devices.commands.Sleep',
  },
  'action.devices.commands.StopEffect': {
    type: 'action.devices.commands.StopEffect',
  },
  'action.devices.commands.Wake': {
    type: 'action.devices.commands.Wake',
  },
  'action.devices.commands.Locate': {
    type: 'action.devices.commands.Locate',
  },
  'action.devices.commands.LockUnlock': {
    type: 'action.devices.commands.LockUnlock',
  },
  'action.devices.commands.SetModes': {
    type: 'action.devices.commands.SetModes',
  },
  enable: {
    type: 'enable',
  },
  'action.devices.commands.OnOff': {
    type: 'action.devices.commands.OnOff',
  },
  'action.devices.commands.OpenClose': {
    type: 'action.devices.commands.OpenClose',
  },
  'action.devices.commands.Reboot': {
    type: 'action.devices.commands.Reboot',
  },
  'action.devices.commands.RotateAbsolute': {
    type: 'action.devices.commands.RotateAbsolute',
  },
  'action.devices.commands.ActivateScene': {
    type: 'action.devices.commands.ActivateScene',
  },
  'action.devices.commands.SoftwareUpdate': {
    type: 'action.devices.commands.SoftwareUpdate',
  },
  'action.devices.commands.StartStop': {
    type: 'action.devices.commands.StartStop',
  },
  'action.devices.commands.PauseUnpause': {
    type: 'action.devices.commands.PauseUnpause',
  },
  'action.devices.commands.SetTemperature': {
    type: 'action.devices.commands.SetTemperature',
  },
  'action.devices.commands.ThermostatTemperatureSetpoint': {
    type: 'action.devices.commands.ThermostatTemperatureSetpoint',
  },
  'action.devices.commands.ThermostatTemperatureSetRange': {
    type: 'action.devices.commands.ThermostatTemperatureSetRange',
  },
  'action.devices.commands.ThermostatSetMode': {
    type: 'action.devices.commands.ThermostatSetMode',
  },
  'action.devices.commands.TemperatureRelative': {
    type: 'action.devices.commands.TemperatureRelative',
  },
  'action.devices.commands.TimerStart': {
    type: 'action.devices.commands.TimerStart',
  },
  'action.devices.commands.TimerAdjust': {
    type: 'action.devices.commands.TimerAdjust',
  },
  'action.devices.commands.TimerPause': {
    type: 'action.devices.commands.TimerPause',
  },
  'action.devices.commands.TimerResume': {
    type: 'action.devices.commands.TimerResume',
  },
  'action.devices.commands.TimerCancel': {
    type: 'action.devices.commands.TimerCancel',
  },
  'action.devices.commands.SetToggles': {
    type: 'action.devices.commands.SetToggles',
  },
  closedCaptioningLanguage: {
    type: 'closedCaptioningLanguage',
  },
  userQueryLanguage: {
    type: 'userQueryLanguage',
  },
  mute: {
    type: 'mute',
  },
};

export type AppSelectorTraitTypeAttributes = {
availableApplications: Array<{
key: string;
names: Array<{
'name_synonym': Array<string>;
lang: string;
}>;
}>;
};
export type AppSelectorTraitTypeStates = {
currentApplication: string;
};
export type NewApplicationCommandType = TraitCommandType<'newApplication', string>;
export type NewApplicationNameCommandType = TraitCommandType<'newApplicationName', string>;
export type AppSelectorTraitTypeCommands = NewApplicationCommandType
  | NewApplicationNameCommandType;
export type AppSelectorTraitType = TraitType<
  AppSelectorTraitTypeAttributes,
  AppSelectorTraitTypeStates,
  AppSelectorTraitTypeCommands>;
export type ArmDisarmTraitTypeAttributes = {
availableArmLevels: {
levels: Array<{
'level_name': string;
'level_values': Array<{
'level_synonym': Array<string>;
lang: string;
}>;
}>;
ordered: boolean;
};
};
export type ArmDisarmTraitTypeStates = {
isArmed: boolean;
currentArmLevel: string;
currentStatusReport: any;
exitAllowance: number;
};
export type ArmDisarmCommandType = TraitCommandType<'action.devices.commands.ArmDisarm', any>;
export type ArmDisarmTraitTypeCommands = ArmDisarmCommandType;
export type ArmDisarmTraitType = TraitType<
  ArmDisarmTraitTypeAttributes,
  ArmDisarmTraitTypeStates,
  ArmDisarmTraitTypeCommands>;
export type BrightnessTraitTypeAttributes = {
commandOnlyBrightness: boolean;
};
export type BrightnessTraitTypeStates = {
brightness: number;
};
export type BrightnessAbsoluteCommandType = TraitCommandType<'action.devices.commands.BrightnessAbsolute', number>;
export type BrightnessTraitTypeCommands = BrightnessAbsoluteCommandType;
export type BrightnessTraitType = TraitType<
  BrightnessTraitTypeAttributes,
  BrightnessTraitTypeStates,
  BrightnessTraitTypeCommands>;
export type CameraStreamTraitTypeAttributes = {
cameraStreamSupportedProtocols: Array<string>;
cameraStreamNeedAuthToken: boolean;
cameraStreamNeedDrmEncryption: boolean;
};
export type CameraStreamTraitTypeStates = {};
export type GetCameraStreamCommandType = TraitCommandType<'action.devices.commands.GetCameraStream', string>;
export type CameraStreamTraitTypeCommands = GetCameraStreamCommandType;
export type CameraStreamTraitType = TraitType<
  CameraStreamTraitTypeAttributes,
  CameraStreamTraitTypeStates,
  CameraStreamTraitTypeCommands>;
export type ColorSettingTraitTypeAttributes = {
colorModel: string;
colorTemperatureRange: {
temperatureMinK: number;
temperatureMaxK: number;
};
commandOnlyColorSetting: boolean;
};
export type ColorSettingTraitTypeStates = {
color: {
temperatureK: number;
spectrumRgb: number;
spectrumHsv: {
hue: number;
saturation: number;
value: number;
};
};
};
export type ColorAbsoluteCommandType = TraitCommandType<'action.devices.commands.ColorAbsolute', {
name: string;
}>;
export type ColorSettingTraitTypeCommands = ColorAbsoluteCommandType;
export type ColorSettingTraitType = TraitType<
  ColorSettingTraitTypeAttributes,
  ColorSettingTraitTypeStates,
  ColorSettingTraitTypeCommands>;
export type ColorSpectrumTraitTypeAttributes = {
colorModel: string;
};
export type ColorSpectrumTraitTypeStates = {
color: {
name: string;
spectrumRGB: number;
};
};
export type ColorSpectrumTraitTypeCommands = undefined;
export type ColorSpectrumTraitType = TraitType<
  ColorSpectrumTraitTypeAttributes,
  ColorSpectrumTraitTypeStates,
  ColorSpectrumTraitTypeCommands>;
export type ColorTemperatureTraitTypeAttributes = {
temperatureMinK: any;
temperatureMaxK: any;
};
export type ColorTemperatureTraitTypeStates = {
color: {
name: string;
temperature: number;
};
};
export type ColorTemperatureTraitTypeCommands = undefined;
export type ColorTemperatureTraitType = TraitType<
  ColorTemperatureTraitTypeAttributes,
  ColorTemperatureTraitTypeStates,
  ColorTemperatureTraitTypeCommands>;
export type CookTraitTypeAttributes = {
supportedCookingModes: string;
foodPresets: Array<{
'food_preset_name': string;
'supported_units': Array<string>;
'food_synonyms': Array<{
synonym: Array<string>;
lang: string;
}>;
}>;
};
export type CookTraitTypeStates = {
currentCookingMode: string;
currentFoodPreset: string;
currentFoodQuantity: number;
currentFoodUnit: string;
};
export type CookCommandType = TraitCommandType<'action.devices.commands.Cook', any>;
export type CookTraitTypeCommands = CookCommandType;
export type CookTraitType = TraitType<
  CookTraitTypeAttributes,
  CookTraitTypeStates,
  CookTraitTypeCommands>;
export type DispenseTraitTypeAttributes = {
supportedDispenseItems: Array<{
'item_name': string;
'item_name_synonyms': Array<{
lang: string;
synonyms: Array<string>;
}>;
'supported_units': Array<string>;
'default_portion': {
amount: number;
unit: string;
};
}>;
};
export type DispenseTraitTypeStates = {
dispenseItems: Array<{
itemName: string;
amountRemaining: {
amount: number;
unit: string;
};
amountLastDispensed: {
amount: number;
unit: string;
};
isCurrentlyDispensing: boolean;
}>;
};
export type DispenseCommandType = TraitCommandType<'action.devices.commands.Dispense', any>;
export type DispenseTraitTypeCommands = DispenseCommandType;
export type DispenseTraitType = TraitType<
  DispenseTraitTypeAttributes,
  DispenseTraitTypeStates,
  DispenseTraitTypeCommands>;
export type DockTraitTypeAttributes = {};
export type DockTraitTypeStates = {
isDocked: any;
};
export type DockCommandType = TraitCommandType<'action.devices.commands.Dock', any>;
export type DockTraitTypeCommands = DockCommandType;
export type DockTraitType = TraitType<
  DockTraitTypeAttributes,
  DockTraitTypeStates,
  DockTraitTypeCommands>;
export type EnergyStorageTraitTypeAttributes = {
queryOnlyEnergyStorage: boolean;
energyStorageDistanceUnitForUX: string;
isRechargeable: boolean;
};
export type EnergyStorageTraitTypeStates = {
descriptiveCapacityRemaining: string;
capacityRemaining: Array<{}>;
};
export type ChargeCommandType = TraitCommandType<'action.devices.commands.Charge', boolean>;
export type EnergyStorageTraitTypeCommands = ChargeCommandType;
export type EnergyStorageTraitType = TraitType<
  EnergyStorageTraitTypeAttributes,
  EnergyStorageTraitTypeStates,
  EnergyStorageTraitTypeCommands>;
export type FanSpeedTraitTypeAttributes = {
availableFanSpeeds: any;
reversible: boolean;
supportsFanSpeedPercent: boolean;
commandOnlyFanSpeed: boolean;
};
export type FanSpeedTraitTypeStates = {
currentFanSpeedSetting: string;
currentFanSpeedPercent: number;
};
export type SetFanSpeedCommandType = TraitCommandType<'action.devices.commands.SetFanSpeed', any>;
export type SetFanSpeedRelativeSpeedCommandType = TraitCommandType<'action.devices.commands.SetFanSpeedRelativeSpeed', any>;
export type ReverseCommandType = TraitCommandType<'action.devices.commands.Reverse', any>;
export type FanSpeedTraitTypeCommands = SetFanSpeedCommandType
  | SetFanSpeedRelativeSpeedCommandType
  | ReverseCommandType;
export type FanSpeedTraitType = TraitType<
  FanSpeedTraitTypeAttributes,
  FanSpeedTraitTypeStates,
  FanSpeedTraitTypeCommands>;
export type FillTraitTypeAttributes = {
availableFillLevels: {
levels: Array<{
'level_name': string;
'level_values': any;
'level_synonym': Array<string>;
}>;
ordered: boolean;
};
};
export type FillTraitTypeStates = {
isFilled: boolean;
currentFillLevel: string;
};
export type FillCommandType = TraitCommandType<'action.devices.commands.Fill', boolean>;
export type FillTraitTypeCommands = FillCommandType;
export type FillTraitType = TraitType<
  FillTraitTypeAttributes,
  FillTraitTypeStates,
  FillTraitTypeCommands>;
export type HumiditySettingTraitTypeAttributes = {
humiditySetpointRange: any;
commandOnlyHumiditySetting: boolean;
queryOnlyHumiditySetting: boolean;
};
export type HumiditySettingTraitTypeStates = {
humiditySetpointPercent: number;
humidityAmbientPercent: number;
};
export type SetHumidityCommandType = TraitCommandType<'action.devices.commands.SetHumidity', number>;
export type HumidityRelativeCommandType = TraitCommandType<'action.devices.commands.HumidityRelative', any>;
export type HumiditySettingTraitTypeCommands = SetHumidityCommandType
  | HumidityRelativeCommandType;
export type HumiditySettingTraitType = TraitType<
  HumiditySettingTraitTypeAttributes,
  HumiditySettingTraitTypeStates,
  HumiditySettingTraitTypeCommands>;
export type InputSelectorTraitTypeAttributes = {
availableInputs: Array<{
key: string;
names: Array<{
lang: string;
'name_synonym': Array<string>;
}>;
}>;
commandOnlyInputSelector: boolean;
orderedInputs: boolean;
};
export type InputSelectorTraitTypeStates = {
currentInput: string;
};
export type NewInputCommandType = TraitCommandType<'newInput', string>;
export type InputSelectorTraitTypeCommands = NewInputCommandType;
export type InputSelectorTraitType = TraitType<
  InputSelectorTraitTypeAttributes,
  InputSelectorTraitTypeStates,
  InputSelectorTraitTypeCommands>;
export type LightEffectsTraitTypeAttributes = {
defaultSleepDuration: number;
defaultWakeDuration: number;
supportedEffects: Array<{
colorLoop: any;
sleep: any;
wake: any;
}>;
};
export type LightEffectsTraitTypeStates = {
activeLightEffect: string;
};
export type ColorLoopCommandType = TraitCommandType<'action.devices.commands.ColorLoop', any>;
export type SleepCommandType = TraitCommandType<'action.devices.commands.Sleep', any>;
export type StopEffectCommandType = TraitCommandType<'action.devices.commands.StopEffect', any>;
export type WakeCommandType = TraitCommandType<'action.devices.commands.Wake', any>;
export type LightEffectsTraitTypeCommands = ColorLoopCommandType
  | SleepCommandType
  | StopEffectCommandType
  | WakeCommandType;
export type LightEffectsTraitType = TraitType<
  LightEffectsTraitTypeAttributes,
  LightEffectsTraitTypeStates,
  LightEffectsTraitTypeCommands>;
export type LocatorTraitTypeAttributes = {};
export type LocatorTraitTypeStates = {};
export type LocateCommandType = TraitCommandType<'action.devices.commands.Locate', boolean>;
export type LocatorTraitTypeCommands = LocateCommandType;
export type LocatorTraitType = TraitType<
  LocatorTraitTypeAttributes,
  LocatorTraitTypeStates,
  LocatorTraitTypeCommands>;
export type LockUnlockTraitTypeAttributes = {};
export type LockUnlockTraitTypeStates = {
isLocked: boolean;
isJammed: boolean;
};
export type LockUnlockCommandType = TraitCommandType<'action.devices.commands.LockUnlock', boolean>;
export type LockUnlockTraitTypeCommands = LockUnlockCommandType;
export type LockUnlockTraitType = TraitType<
  LockUnlockTraitTypeAttributes,
  LockUnlockTraitTypeStates,
  LockUnlockTraitTypeCommands>;
export type MediaStateTraitTypeAttributes = {
supportActivityState: boolean;
supportPlaybackState: boolean;
};
export type MediaStateTraitTypeStates = {
activityState: string;
playbackState: string;
};
export type MediaStateTraitTypeCommands = undefined;
export type MediaStateTraitType = TraitType<
  MediaStateTraitTypeAttributes,
  MediaStateTraitTypeStates,
  MediaStateTraitTypeCommands>;
export type ModesTraitTypeAttributes = {
availableModes: any;
commandOnlyModes: boolean;
};
export type ModesTraitTypeStates = {
currentModeSettings: string;
};
export type SetModesCommandType = TraitCommandType<'action.devices.commands.SetModes', string>;
export type ModesTraitTypeCommands = SetModesCommandType;
export type ModesTraitType = TraitType<
  ModesTraitTypeAttributes,
  ModesTraitTypeStates,
  ModesTraitTypeCommands>;
export type NetworkControlTraitTypeAttributes = {
supportsEnablingGuestNetwork: boolean;
supportsDisablingGuestNetwork: boolean;
networkProfiles: Array<string>;
supportsEnablingNetworkProfile: boolean;
supportsDisablingNetworkProfile: boolean;
supportsNetworkDownloadSpeedTest: boolean;
supportsNetworkUploadSpeedTest: boolean;
supportsGettingGuestNetworkPassword: boolean;
};
export type NetworkControlTraitTypeStates = {
networkEnabled: boolean;
networkSettings: {
ssid: string;
};
guestNetworkEnabled: boolean;
guestNetworkSettings: {
ssid: string;
};
numConnectedDevices: number;
networkUsageMB: number;
networkUsageLimitMB: number;
networkUsageUnlimited: boolean;
};
export type EnableCommandType = TraitCommandType<'enable', boolean>;
export type NetworkControlTraitTypeCommands = EnableCommandType;
export type NetworkControlTraitType = TraitType<
  NetworkControlTraitTypeAttributes,
  NetworkControlTraitTypeStates,
  NetworkControlTraitTypeCommands>;
export type OnOffTraitTypeAttributes = {
commandOnlyOnOff: boolean;
queryOnlyOnOff: boolean;
};
export type OnOffTraitTypeStates = {
on: boolean;
};
export type OnOffCommandType = TraitCommandType<'action.devices.commands.OnOff', boolean>;
export type OnOffTraitTypeCommands = OnOffCommandType;
export type OnOffTraitType = TraitType<
  OnOffTraitTypeAttributes,
  OnOffTraitTypeStates,
  OnOffTraitTypeCommands>;
export type OpenCloseTraitTypeAttributes = {
discreteOnlyOpenClose: boolean;
openDirection: string;
queryOnlyOpenClose: boolean;
};
export type OpenCloseTraitTypeStates = {
openState: any;
};
export type OpenCloseCommandType = TraitCommandType<'action.devices.commands.OpenClose', number>;
export type OpenCloseTraitTypeCommands = OpenCloseCommandType;
export type OpenCloseTraitType = TraitType<
  OpenCloseTraitTypeAttributes,
  OpenCloseTraitTypeStates,
  OpenCloseTraitTypeCommands>;
export type RebootTraitTypeAttributes = {};
export type RebootTraitTypeStates = {};
export type RebootCommandType = TraitCommandType<'action.devices.commands.Reboot', any>;
export type RebootTraitTypeCommands = RebootCommandType;
export type RebootTraitType = TraitType<
  RebootTraitTypeAttributes,
  RebootTraitTypeStates,
  RebootTraitTypeCommands>;
export type RotationTraitTypeAttributes = {
commandOnlyRotation: boolean;
supportsContinuousRotation: boolean;
supportsDegrees: boolean;
supportsPercent: boolean;
rotationDegreesRange: number;
};
export type RotationTraitTypeStates = {
rotationPercent: number;
rotationDegrees: number;
};
export type RotateAbsoluteCommandType = TraitCommandType<'action.devices.commands.RotateAbsolute', number>;
export type RotationTraitTypeCommands = RotateAbsoluteCommandType;
export type RotationTraitType = TraitType<
  RotationTraitTypeAttributes,
  RotationTraitTypeStates,
  RotationTraitTypeCommands>;
export type RunCycleTraitTypeAttributes = {};
export type RunCycleTraitTypeStates = {
currentCycle: string;
nextCycle: string;
lang: any;
currentTotalRemainingTime: number;
currentCycleRemainingTime: number;
};
export type RunCycleTraitTypeCommands = undefined;
export type RunCycleTraitType = TraitType<
  RunCycleTraitTypeAttributes,
  RunCycleTraitTypeStates,
  RunCycleTraitTypeCommands>;
export type SensorStateTraitTypeAttributes = {
sensorStatesSupported: Array<{
name: string;
descriptiveCapabilities: {
'available_states': Array<string>;
};
numericCapabilities: {
rawValueUnit: string;
};
}>;
};
export type SensorStateTraitTypeStates = {
currentSensorStateData: Array<{
name: string;
currentSensorState: string;
rawValue: number;
}>;
};
export type SensorStateTraitTypeCommands = undefined;
export type SensorStateTraitType = TraitType<
  SensorStateTraitTypeAttributes,
  SensorStateTraitTypeStates,
  SensorStateTraitTypeCommands>;
export type SceneTraitTypeAttributes = {
sceneReversible: boolean;
};
export type SceneTraitTypeStates = {};
export type ActivateSceneCommandType = TraitCommandType<'action.devices.commands.ActivateScene', boolean>;
export type SceneTraitTypeCommands = ActivateSceneCommandType;
export type SceneTraitType = TraitType<
  SceneTraitTypeAttributes,
  SceneTraitTypeStates,
  SceneTraitTypeCommands>;
export type SoftwareUpdateTraitTypeAttributes = {};
export type SoftwareUpdateTraitTypeStates = {
lastSoftwareUpdateUnixTimestampSec: number;
};
export type SoftwareUpdateCommandType = TraitCommandType<'action.devices.commands.SoftwareUpdate', any>;
export type SoftwareUpdateTraitTypeCommands = SoftwareUpdateCommandType;
export type SoftwareUpdateTraitType = TraitType<
  SoftwareUpdateTraitTypeAttributes,
  SoftwareUpdateTraitTypeStates,
  SoftwareUpdateTraitTypeCommands>;
export type StartStopTraitTypeAttributes = {
pausable: boolean;
availableZones: Array<string>;
};
export type StartStopTraitTypeStates = {
isRunning: boolean;
isPaused: boolean;
activeZones: Array<string>;
};
export type StartStopCommandType = TraitCommandType<'action.devices.commands.StartStop', boolean>;
export type PauseUnpauseCommandType = TraitCommandType<'action.devices.commands.PauseUnpause', boolean>;
export type StartStopTraitTypeCommands = StartStopCommandType
  | PauseUnpauseCommandType;
export type StartStopTraitType = TraitType<
  StartStopTraitTypeAttributes,
  StartStopTraitTypeStates,
  StartStopTraitTypeCommands>;
export type StatusReportTraitTypeAttributes = {};
export type StatusReportTraitTypeStates = {
currentStatusReport: {
blocking: boolean;
deviceTarget: string;
priority: number;
statusCode: string;
};
};
export type StatusReportTraitTypeCommands = undefined;
export type StatusReportTraitType = TraitType<
  StatusReportTraitTypeAttributes,
  StatusReportTraitTypeStates,
  StatusReportTraitTypeCommands>;
export type TemperatureControlTraitTypeAttributes = {
temperatureRange: any;
temperatureStepCelsius: number;
temperatureUnitForUX: any;
queryOnlyTemperatureControl: boolean;
commandOnlyTemperatureControl: boolean;
};
export type TemperatureControlTraitTypeStates = {
temperatureSetpointCelsius: number;
temperatureAmbientCelsius: number;
};
export type SetTemperatureCommandType = TraitCommandType<'action.devices.commands.SetTemperature', number>;
export type TemperatureControlTraitTypeCommands = SetTemperatureCommandType;
export type TemperatureControlTraitType = TraitType<
  TemperatureControlTraitTypeAttributes,
  TemperatureControlTraitTypeStates,
  TemperatureControlTraitTypeCommands>;
export type TemperatureSettingTraitTypeAttributes = {
availableThermostatModes: Array<{
off: any;
heat: any;
cool: any;
on: any;
heatcool: any;
auto: any;
'fan-only': any;
purifier: any;
eco: any;
dry: any;
}>;
thermostatTemperatureRange: {
minThresholdCelsius: any;
maxThresholdCelsius: any;
};
thermostatTemperatureUnit: any;
bufferRangeCelsius: any;
commandOnlyTemperatureSetting: boolean;
queryOnlyTemperatureSetting: boolean;
};
export type TemperatureSettingTraitTypeStates = {
activeThermostatMode: string;
targetTempReachedEstimateUnixTimestampSec: any;
thermostatHumidityAmbient: number;
thermostatMode: any;
thermostatTemperatureAmbient: any;
thermostatTemperatureSetpoint: any;
thermostatTemperatureSetpointHigh: any;
thermostatTemperatureSetpointLow: any;
};
export type ThermostatTemperatureSetpointCommandType = TraitCommandType<'action.devices.commands.ThermostatTemperatureSetpoint', number>;
export type ThermostatTemperatureSetRangeCommandType = TraitCommandType<'action.devices.commands.ThermostatTemperatureSetRange', number>;
export type ThermostatSetModeCommandType = TraitCommandType<'action.devices.commands.ThermostatSetMode', any>;
export type TemperatureRelativeCommandType = TraitCommandType<'action.devices.commands.TemperatureRelative', any>;
export type TemperatureSettingTraitTypeCommands = ThermostatTemperatureSetpointCommandType
  | ThermostatTemperatureSetRangeCommandType
  | ThermostatSetModeCommandType
  | TemperatureRelativeCommandType;
export type TemperatureSettingTraitType = TraitType<
  TemperatureSettingTraitTypeAttributes,
  TemperatureSettingTraitTypeStates,
  TemperatureSettingTraitTypeCommands>;
export type TimerTraitTypeAttributes = {
maxTimerLimitSec: number;
commandOnlyTimer: boolean;
};
export type TimerTraitTypeStates = {
timerRemainingSec: number;
timerPaused: boolean;
};
export type TimerStartCommandType = TraitCommandType<'action.devices.commands.TimerStart', number>;
export type TimerAdjustCommandType = TraitCommandType<'action.devices.commands.TimerAdjust', number>;
export type TimerPauseCommandType = TraitCommandType<'action.devices.commands.TimerPause', any>;
export type TimerResumeCommandType = TraitCommandType<'action.devices.commands.TimerResume', any>;
export type TimerCancelCommandType = TraitCommandType<'action.devices.commands.TimerCancel', any>;
export type TimerTraitTypeCommands = TimerStartCommandType
  | TimerAdjustCommandType
  | TimerPauseCommandType
  | TimerResumeCommandType
  | TimerCancelCommandType;
export type TimerTraitType = TraitType<
  TimerTraitTypeAttributes,
  TimerTraitTypeStates,
  TimerTraitTypeCommands>;
export type TogglesTraitTypeAttributes = {
availableToggles: any;
commandOnlyToggles: boolean;
};
export type TogglesTraitTypeStates = {
currentToggleSettings: Array<undefined>;
};
export type SetTogglesCommandType = TraitCommandType<'action.devices.commands.SetToggles', boolean>;
export type TogglesTraitTypeCommands = SetTogglesCommandType;
export type TogglesTraitType = TraitType<
  TogglesTraitTypeAttributes,
  TogglesTraitTypeStates,
  TogglesTraitTypeCommands>;
export type TransportControlTraitTypeAttributes = {
transportControlSupportedCommands: Array<{
'CAPTION_CONTROL': any;
NEXT: any;
PAUSE: any;
PREVIOUS: any;
RESUME: any;
'SEEK_RELATIVE': any;
'SEEK_TO_POSITION': any;
'SET_REPEAT': any;
SHUFFLE: any;
STOP: any;
}>;
};
export type TransportControlTraitTypeStates = {};
export type ClosedCaptioningLanguageCommandType = TraitCommandType<'closedCaptioningLanguage', string>;
export type UserQueryLanguageCommandType = TraitCommandType<'userQueryLanguage', string>;
export type TransportControlTraitTypeCommands = ClosedCaptioningLanguageCommandType
  | UserQueryLanguageCommandType;
export type TransportControlTraitType = TraitType<
  TransportControlTraitTypeAttributes,
  TransportControlTraitTypeStates,
  TransportControlTraitTypeCommands>;
export type VolumeTraitTypeAttributes = {
volumeMaxLevel: number;
volumeCanMuteAndUnmute: boolean;
volumeDefaultPercentage: number;
levelStepSize: number;
commandOnlyVolume: boolean;
};
export type VolumeTraitTypeStates = {
currentVolume: number;
isMuted: boolean;
};
export type MuteCommandType = TraitCommandType<'mute', boolean>;
export type VolumeTraitTypeCommands = MuteCommandType;
export type VolumeTraitType = TraitType<
  VolumeTraitTypeAttributes,
  VolumeTraitTypeStates,
  VolumeTraitTypeCommands>;
