scalar Upload
scalar DateTime
scalar TrueOnly
scalar JSONObject

# SmartHomeMiddleware
scalar DeviceType
scalar TraitType
scalar CommandType
scalar AttributesProviderType
scalar StatesProviderType
scalar CommandsProviderType

type Query {
    ## SensorMiddleware
    sensors: [Sensor!]!
    sensorData(sensorName: String!, dataType: String!): [SensorData!]!

    # RemoteControllerMiddleware
    remoteControllers: [RemoteController!]!
    remoteController(id: Int!): RemoteController!

    # WidgetMiddleware
    widgets: [Widget!]!

    # SmartHomeMiddleware
    deviceTypes: [DeviceTypeData!]!
    traitTypes: [TraitTypeData!]!
    attributesProviderTypes: [String!]!
    statesProviderTypes: [String!]!
    commandsProviderTypes: [String!]!
    traitInfo(type: TraitType!): TraitInfomation!
    devices: [Device!]!
}

type Mutation {
    ## AuthMiddleware
    signUp(username: String!, password: String!): TrueOnly!
    login(username: String!, password: String!, clientId: String): AuthToken!

    # SensorMiddleware
    addSensorData(name: String!, dataType: String!, value: Float!, createdAt: DateTime): Boolean!

    # IRMiddleware
    registerIrServer(ip: String!): String!

    # RemoteControllerMiddleware
    addRemoteController(name: String!): RemoteController!
    addRemoteControllerButton(controllerId: Int, name: String!): RemoteControllerButton!
    sendRemoteControllerButton(buttonId: Int): TrueOnly!

    # WidgetMiddleware
    addSensorWidget(name: String!, dataType: String!): SensorWidget!
    addRemoteControllerWidget(controllerId: Int!): RemoteControllerWidget!

    # SmartHomeMiddleware
    addDevice(device: InputDevice!): Device!
    addTrait(trait: InputTrait!): Trait!
}

type Subscription {
    # SensorMiddleware
    sensorData(sensorName: String!, dataType: String!): SensorData!
}

type AuthToken {
    accessToken: String!
    refreshToken: String!
    expiredAt: DateTime!
}

type Sensor {
    name: String!
    dataType: [String!]!
}

type SensorData {
    value: Float!
    createdAt: DateTime!
}

type RemoteController {
    id: Int!
    name: String!

    buttons: [RemoteControllerButton!]!
}

type RemoteControllerButton {
    id: Int!
    name: String!
}

interface Widget {
    id: Int!
}

type SensorWidget implements Widget {
    id: Int!
    name: String!
    dataType: String!
}

type RemoteControllerWidget implements Widget {
    id: Int!
    controllerId: Int!
}

type Device {
    id: Int!
    type: DeviceTypeData!
    name: String!
    willReportState: Boolean!
    roomHint: String

    traits: [Trait!]!
}

type Trait {
    id: Int!
    type: TraitType!

    attributesProvider: AttributesProvider!
    statesProvider: StatesProvider!
    commandsProvider: [CommandsProvider!]!
}

type DeviceTypeData {
    type: DeviceType!
    name: String!
}

type TraitTypeData {
    type: TraitType!
    name: String!
}

type AttributesProvider {
    traitId: Int!
    type: AttributesProviderType!
    content: JSONObject!
}

type StatesProvider {
    traitId: Int!
    type: StatesProviderType!
    content: JSONObject!
}

type CommandsProvider {
    traitId: Int!
    type: CommandsProviderType!
    content: JSONObject
}

type TraitInfomation {
    type: TraitType!
    attributesJson: JSONObject!
    statesJson: JSONObject!
    commands: [String!]!
}

input InputDevice {
    type: DeviceType!
    name: String!
    willReportState: Boolean!
    roomHint: String
}

input AttributesProviderInput {
    type: AttributesProviderType!
    content: JSONObject!
}
input StatesProviderInput {
    type: StatesProviderType!
    content: JSONObject!
}
input CommandsProviderInput {
    type: CommandsProviderType!
    content: JSONObject!
}

input InputTrait {
    deviceId: Int!
    type: TraitType!

    attributesProvider: AttributesProviderInput!
    statesProvider: StatesProviderInput!
    commandsProviders: [CommandInput!]!
}

input CommandInput {
    type: CommandType!
    provider: CommandsProviderInput!
}
