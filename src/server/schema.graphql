scalar Upload
scalar DateTime

# SmartHomeMiddleware
scalar DeviceType
scalar TraitType
scalar ProviderType

type Query {
    ## SensorMiddleware
    sensors: [Sensor!]!
    sensorData(sensorName: String!, dataType: String!): [SensorData!]!

    # RemoteControllerMiddleware
    remoteControllers: [RemoteController!]!
    remoteController(id: Int!): RemoteController

    # WidgetMiddleware
    widgets: [Widget!]!

    # SmartHomeMiddleware
    deviceTypes: [DeviceTypeData!]!
    devices: [Device!]!
}

type Mutation {
    ## AuthMiddleware
    signUp(username: String!, password: String!): Boolean!
    login(username: String!, password: String!, clientId: String): AuthToken

    # SensorMiddleware
    addSensorData(name: String!, dataType: String!, value: Float!, createdAt: DateTime): Boolean!

    # IRMiddleware
    registerIrServer(ip: String!): String!

    # RemoteControllerMiddleware
    addRemoteController(name: String!): RemoteController
    addRemoteControllerButton(controllerId: Int, name: String!): RemoteControllerButton
    sendRemoteControllerButton(buttonId: Int): Boolean!

    # WidgetMiddleware
    addSensorWidget(name: String!, dataType: String!): SensorWidget
    addRemoteControllerWidget(controllerId: Int!): RemoteControllerWidget

    # SmartHomeMiddleware
    addDevice(device: InputDevice!): Device
}

type Subscription {
    # SensorMiddleware
    sensorData(sensorName: String!, dataType: String!): SensorData!
}

type AuthToken {
    accessToken: String!
    refreshToken: String!
    expiredAt: DateTime!
}

type Sensor {
    name: String!
    dataType: [String!]!
}

type SensorData {
    value: Float!
    createdAt: DateTime!
}

type RemoteController {
    id: Int!
    name: String!

    buttons: [RemoteControllerButton!]!
}

type RemoteControllerButton {
    id: Int!
    name: String!
}

interface Widget {
    id: Int!
}

type SensorWidget implements Widget {
    id: Int!
    name: String!
    dataType: String!
}

type RemoteControllerWidget implements Widget {
    id: Int!
    controllerId: Int!
}

type Device {
    id: Int!
    type: DeviceTypeData!
    name: String!
    willReportState: Boolean!
    roomHint: String

    traits: [Trait!]!
}

type Trait {
    id: Int!
    type: TraitType!

    attributesProvider: Provider!
    statesProvider: Provider!
    commandsProvider: Provider!
}

type Provider {
    traitId: Int!
    type: ProviderType!
    content: String!
}

input InputDevice {
    type: DeviceType!
    name: String!
    willReportState: Boolean!
    roomHint: String
}

type DeviceTypeData {
    type: DeviceType!
    name: String!
}
